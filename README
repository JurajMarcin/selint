SUMMARY

	SELint is a program to perform static code analysis on SELinux policy
	source files 
	

INSTALLING

	To install, first install the following dependencies:

	TODO: List dependencies

	Then run:

	./configure
	make
	make install

USAGE

	selint [OPTIONS] FILE [...] 

OPTIONS

	-c CONFIGFILE, --config=CONFIGFILE
		Override default config with config specified on command line.  See
		CONFIGURATION section for config file syntax.

	-d CHECKID, --disable=CHECKID
		Disable check with the given ID.

	-e CHECKID, --enable=CHECKID
		Enable check with the given ID.

	-h, --help
		Show help menu about command line options.

	-l LEVEL, --level=LEVEL
		Only list errors with a severity level at or greater than LEVEL.  Options
		are C (convention), S (style), W (warning), E (error), F (fatal error).  See
		SEVERITY LEVELS for more information.  If this option is not specified,
		SELint will default to the level selected in the applicable config file.

	-s, --source
		Run in "source mode" to scan a policy source repository that is designed to
		compile into a full system policy.  If this flag is not specified, SELint
		will assume that scanned policy files are intended to be loaded into the
		currently running system policy. 

	-r, --recursive
		Scan recursively and check all SELinux policy files found.

	-v, --verbose
		Enable verbose output

	-V, --version
		Show version information and exit.

CONFIGURATION

	A global configuration is specified at [TODO: Global config location].  This
	can be overridden by a user config at ~/.selint.conf, or on the command line
	using the -c option.

	Options specified on the command line override options from the config file.

	See the global config file for details on config file syntax.

SEVERITY LEVELS

	SELint messages are assocatied with a severity level, indicating the
	significance of the issue.  Available levels are listed below in increasing
	order of significance.

	C (convention) - A violation of common style conventions
	S (style) - Stylistic "code smell" that may be associated with unintended
	behavior
	W (warning) - Non standard policy that may result in issues such as run time
	errors or security issues
	E (error) - Important issues that may result in errors at compile time or
	run time
	F (fatal error) - Error that prevents further processing

SELINT EXCEPTIONS

	To eliminate a check on one line, add a comment containing a string in the
	following format:
	"--selint:E-003"

OUTPUT

	SELint outputs messages in the following format:

	[SEVERITY LEVEL]([LINENO]): [MESSAGE] ([ISSUE ID])

	For example:

	W(127): Interface from module not in optional_policy block (E-001)

CHECK IDS

	The following checks may be performed:

	C-001: Violation of refpolicy te file ordering conventions
	C-002: Interface missing comment

	S-001: Require block used instead of interface call

	W-001: Type referenced without explicit declaration
	W-002: Type used but not listed in require block in interface

	E-001: Interfaces from module not in optional_policy block
	E-002: Bad file context format
	E-003: Nonexistent type listed in fc file

	F-001: Policy syntax error prevents further processing
	F-002: Internal error in SELint

CHECK EXAMPLES

	Here are examples of errors that will cause each possible result:

	Convention:

	C-001:

		type foo_t;

		allow foo_t self:process signal;
	
		type bar_t;

	C-002:

		interface(`foo_read_conf',`
			...
		')

	Style:

	S-001:

		require {
			type foo_t;
		}

	Warning:

	W-001:

		# etc_t is defined in files module
		read_files_pattern(foo_t, etc_t, etc_t)

	W-002:

		interface(`foo_read_conf',`
			read_files_pattern($1, foo_conf_t, foo_conf_t)
		')

	Error:

	E-001:

		# apache is set as a module in our modules.conf
		apache_read_tmp_files(foo_t)

	E-002:

		/usr/bin/foo		--	gen_erquire(system_u:object_r:foo_exec_t, s0)

	E-003:

		# There is no type named foo_exce_t defined in our policy
		/usr/bin/foo		--	gen_require(system_u:object_r:foo_exce_t, s0)
